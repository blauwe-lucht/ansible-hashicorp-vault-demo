---
# Inspired by https://github.com/MiteshSharma/AnsibleVaultRole/tree/master
- name: Install vault
  hosts: vault
  gather_facts: false
  vars:
    vault_version: "1.16.2"
    vault_group: vault
    vault_user: vault
    unseal_keys_dir_output: /root/unsealKey
    root_token_dir_output: /root/rootKey
    vault_addr: "http://{{ ansible_host }}:8200"
    kv_mount_path: secret
  tasks:
    - name: Install required packages
      ansible.builtin.apt:
        name:
          - unzip
          - python3-hvac  # Needed for module vault_write
        state: present

    - name: Creating vault user group
      ansible.builtin.group:
        name: "{{ vault_group }}"

    - name: Creating vault user
      ansible.builtin.user:
        name: "{{ vault_user }}"
        group: "{{ vault_group }}"
        system: true
        shell: "/sbin/nologin"
        comment: "vault nologin user"
        createhome: "no"
        state: present

    - name: Download Vault binary
      ansible.builtin.get_url:
        url: https://releases.hashicorp.com/vault/{{ vault_version }}/vault_{{ vault_version }}_linux_amd64.zip
        dest: /root/vault_{{ vault_version }}_linux_amd64.zip
        mode: "0644"

    - name: Unzip the Vault binary
      ansible.builtin.unarchive:
        src: /root/vault_{{ vault_version }}_linux_amd64.zip
        dest: /usr/local/bin
        remote_src: true
        creates: /usr/local/bin/vault

    - name: Set Vault binary executable
      ansible.builtin.file:
        path: /usr/local/bin/vault
        owner: "{{ vault_user }}"
        group: "{{ vault_group }}"
        mode: "0755"

    - name: Set vault binary capabilities
      community.general.capabilities:
        path: /usr/local/bin/vault
        capability: cap_ipc_lock=ep
        state: present
      tags: caps

    - name: Create Vault config directory
      ansible.builtin.file:
        path: /etc/vault.d
        state: directory
        owner: "{{ vault_user }}"
        group: "{{ vault_group }}"
        mode: "0755"

    - name: Deploy Vault configuration file
      ansible.builtin.template:
        src: etc/vault.d/vault.hcl.j2
        dest: /etc/vault.d/vault.hcl
        owner: "{{ vault_user }}"
        group: "{{ vault_group }}"
        mode: "0644"
      notify: Reload vault

    - name: Create Vault data directory
      ansible.builtin.file:
        path: /opt/vault/data
        state: directory
        owner: "{{ vault_user }}"
        group: "{{ vault_group }}"
        mode: "0755"

    - name: Create Vault service file
      ansible.builtin.template:
        src: etc/systemd/system/vault.service.j2
        dest: /etc/systemd/system/vault.service
        owner: root
        group: root
        mode: "0644"

    - name: Enable and start Vault service
      ansible.builtin.systemd:
        name: vault
        enabled: true
        state: started

    - name: Set proper vault address for all users
      ansible.builtin.lineinfile:
        path: /etc/environment
        line: VAULT_ADDR=http://127.0.0.1:8200

    - name: Check vault status
      ansible.builtin.command:
        cmd: vault status
      register: vault_status_result
      failed_when: vault_status_result.stdout is not regex('Storage Type\s+file')
      changed_when: false
      tags: check

    - name: Assert vault status
      ansible.builtin.assert:
        # Until vault is initialized and unsealed, vault status will return exit code 2.
        that: vault_status_result.rc == 2 or vault_status_result.rc == 0

    - name: Init vault
      tags: init
      when: vault_status_result.stdout is regex('Initialized\s+false')
      block:
        - name: Create unseal directory
          ansible.builtin.file:
            path: "{{ unseal_keys_dir_output }}"
            state: directory
            owner: root
            group: root
            mode: "0700"

        - name: Create root key directory
          ansible.builtin.file:
            path: "{{ root_token_dir_output }}"
            state: directory
            owner: root
            group: root
            mode: "0700"

        - name: Initialise Vault operator
          ansible.builtin.command:
            cmd: vault operator init -key-shares=5 -key-threshold=3 -format json
          register: vault_init_results
          changed_when: true

        - name: Parse output of vault init
          ansible.builtin.set_fact:
            vault_init_parsed: "{{ vault_init_results.stdout | from_json }}"

        - name: Write unseal keys to files
          ansible.builtin.copy:
            dest: "{{ unseal_keys_dir_output }}/unseal_key_{{ item.0 }}"
            content: "{{ item.1 }}"
            owner: root
            group: root
            mode: "0600"
          with_indexed_items: "{{ vault_init_parsed.unseal_keys_hex }}"

        - name: Write root token to file
          ansible.builtin.copy:
            content: "{{ vault_init_parsed.root_token }}"
            dest: "{{ root_token_dir_output }}/rootkey"
            owner: root
            group: root
            mode: "0600"

    - name: Check vault status
      ansible.builtin.command:
        cmd: vault status
      register: vault_status_result
      failed_when: vault_status_result.stdout is not regex('Storage Type\s+file')
      changed_when: false

    - name: Assert vault status
      ansible.builtin.assert:
        that:
          # Until vault is initialized and unsealed, vault status will return exit code 2.
          - vault_status_result.rc == 2 or vault_status_result.rc == 0
          - vault_status_result.stdout is regex('Initialized\s+true')

    - name: Unseal vault
      tags: unseal
      when: vault_status_result.stdout is regex('Sealed\s+true')
      block:
        - name: Find all unseal key files
          ansible.builtin.find:
            paths: "{{ unseal_keys_dir_output }}"
            recurse: false
            file_type: file
          register: find_result

        - name: Read contents of each unseal key file
          ansible.builtin.slurp:
            src: "{{ item.path }}"
          loop: "{{ find_result.files }}"
          register: slurp_result

        - name: Unseal vault with unseal keys
          ansible.builtin.command:
            cmd: vault operator unseal {{ item.content | b64decode }}
          changed_when: true
          loop: "{{ slurp_result.results }}"

    - name: Check vault status
      ansible.builtin.command:
        cmd: vault status
      register: vault_status_result
      failed_when: vault_status_result.stdout is not regex('Storage Type\s+file')
      changed_when: false

    - name: Assert vault status
      ansible.builtin.assert:
        that:
          - vault_status_result.rc == 0
          - vault_status_result.stdout is regex('Initialized\s+true')
          - vault_status_result.stdout is regex('Sealed\s+false')

    - name: Retrieve root token
      ansible.builtin.slurp:
        src: "{{ root_token_dir_output }}/rootkey"
      register: slurp_result
      tags: always

    - name: Set vault token
      ansible.builtin.set_fact:
        vault_token: "{{ slurp_result.content | b64decode }}"
      tags: always

    - name: Show further steps
      ansible.builtin.debug:
        msg: |
          You can now point your browser at {{ vault_addr }}.
          When asked for a token, supply {{ vault_token }}

    - name: Enable engine {{ engine.full_name }}
      ansible.builtin.include_tasks: tasks/loop_enable_secrets_engine.yml
      loop:
        - full_name: kv-v2
          name: kv
          root: secret
        - full_name: transit
          name: transit
          root: transit
      loop_control:
        loop_var: engine
        label: "{{ engine.full_name }}"
      tags: secrets-engines

    - name: Check existance of secret
      community.hashi_vault.vault_kv2_get:
        url: "{{ vault_addr }}"
        token: "{{ vault_token }}"
        path: "secret/db_password"
      ignore_errors: true
      register: vault_get_result
      tags: generate

    - name: Generate a random value
      community.hashi_vault.vault_write:
        url: "{{ vault_addr }}"
        token: "{{ vault_token }}"
        path: "transit/random/32"
      register: random_value
      when: vault_get_result.failed
      tags: generate

    - name: Fill secret with random value
      community.hashi_vault.vault_kv2_write:
        url: "{{ vault_addr }}"
        token: "{{ vault_token }}"
        path: "secret/db_password"
        data:
          db_password: "{{ random_value.data.data.random_bytes }}"
      when: vault_get_result.failed
      tags: generate

    - name: Read secret
      community.hashi_vault.vault_kv2_get:
        url: "{{ vault_addr }}"
        token: "{{ vault_token }}"
        path: "secret/db_password"
      register: vault_get_result
      tags: use-secret

    - name: Set var to secret
      ansible.builtin.set_fact:
        db_password: "{{ vault_get_result.secret.db_password }}"
      tags: use-secret

    - name: Display secret
      ansible.builtin.debug:
        msg: "db_password = {{ db_password }}"

  handlers:
    - name: Reload vault
      ansible.builtin.service:
        name: vault
        state: reloaded
